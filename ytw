#!/usr/bin/env bash
#
# ytw - wrapper for youtube
# known dependencies: mpv, rofi, youtube-dl, ttf-nerd-fonts-symbols, libnotify
# github.com/yrwq/ytw

YTW_PATH=$HOME/.local/share/ytw

# path of the downloaded cover image
cover_path=$YTW_PATH/ytw_cover.jpg

# path to audios
# music_dir=$HOME/Music
music_dir=/mnt/music

# path to videos
vid_dir=$HOME/Videos
vid_dir=/mnt/vid/clip

# launch rofi with these arguments
rofi_args="-dmenu -i -matching fuzzy -p "
menu="rofi $rofi_args"

# in the playlist file you should seperate the url from the title with a tab
# example:
# title		url

vidlist="$YTW_PATH/playlist"

# audio download args
ytdl_args="--add-metadata --embed-thumbnail \
	--extract-audio --audio-format mp3 --audio-quality 0 --prefer-ffmpeg \
	--ignore-errors --restrict-filenames --verbose -o $music_dir/%(title)s.%(ext)s"

# video download args
ytdl_vid_args="-f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' -o $vid_dir/%(title)s.%(ext)s"

# usage (ytw -h)
usage(){
cat << EOF

Usage:
	ytw -l		pick from a playlist
	ytw -s		search on youtube
    	ytw -h		help
	ytw <url>	download url as audio

EOF
}

# main menu
main(){

    # If playlist file doesn't exists, create it
    [[ -z "$vidlist" ]] && { touch $vidlist; }

    choices=" Search\n Playlist\n陼 Edit playlist"
    choice=$(echo -ne ${choices} | $menu)
    fin=$(echo ${choice} | awk '{print $2}')
    case $fin in
	"Search")
	    search
	    ;;
	"Playlist")
	    playlist
	    ;;
	"Edit playlist")
	    $TERMINAL -e $EDITOR $vidlist
	    ;;
    esac
}

generate(){
	# search on youtube with rofi
	sh $YTW_PATH/utils -s

	# generate values
	sh $YTW_PATH/utils -m

	# prompt the user to choose from generated values
	choice=$(cat $YTW_PATH/choices | $menu)

	# exit if choice doesn't exist
	[[ -z "$choice" ]] && { exit 1; }

	# get information about video
	id=$(echo -e ${choice} | awk '{print $1}' )
	infos=$(cat $YTW_PATH/values)
	thumbnail=$(echo $infos | jq .videos[$id].thumbnails | sed 's/[][]//g' | sed 's/"//g' )
	dur=$(echo $infos | jq .videos[$id].duration | sed 's/"//g')
	channel=$(echo $infos | jq .videos[$id].channel | sed 's/"//g')
	title=$(echo $infos | jq .videos[$id].title | sed 's/"//g')
	views=$(echo $infos | jq .videos[$id].views | sed 's/"//g')
	url=$(echo $infos | jq .videos[$id].url_suffix | sed 's/"//g')

	# download thumbnail for notifications
	curl -Ss $thumbnail -o $YTW_PATH/ytw_cover.jpg

}

search(){

    # Search and generate values
    generate

    select=" Play\n螺 Add\n蘿 Add&Play\n Audio\n Video\n"
    selmen=$(echo -ne "${select} \nTitle:${title}\nChannel:${channel}\n${views}\nDuration:${dur}" | $menu)
    
    # Remove icons from the selected option
    fin=$(echo ${selmen,,} | awk '{print $2}')
    echo $fin
    # If not selected anything, exit
    [[ -z "$select" ]] && { exit 1; }
    
    case $fin in

	# Play the video with mpv
	play)
	    link=https://www.youtube.com"$url"
	    echo $link | xclip -sel clip
	    notify-send -i $cover_path "   Now playing" "${title}"
  	    mpv "$link"
	    ;;

	# Download and play audio
	*audio*)
	    notify-send -i $cover_path "   Downloading" ${title}
	    link=https://www.youtube.com"$url"
	    echo $link | xclip -sel clip
	    mpv "$link"
	    youtube-dl $ytdl_args $link
	    ;;


	*video*)
	    notify-send -i $cover_path "   Downloading" ${title}
	    link=https://www.youtube.com"$url"
	    echo $link | xclip -sel clip
	    youtube-dl $ytdl_vid_args $link
	    ;;
	add)
	    link=https://www.youtube.com"$url"
	    echo $link | xclip -sel clip
	    
	    echo -ne $title'	'$link'\n' >> $vidlist
	    notify-send -i $cover_path "螺  Added" "${title}"
	    ;;
	"add&play")
	    link=https://www.youtube.com"$url"
	    echo $link | xclip -sel clip
	    echo -ne $title'	'$link'\n' >> $vidlist
	    notify-send -i $cover_path "螺  Added & playing" "${title}"
	    mpv $link
	    ;;
    esac
}

# I don't understand what's going on here so don't ask me.
playlist(){
	cat "$vidlist" | grep -P "^$(cat "$vidlist" | grep "https:" | sed 's/\t.*//g' | $menu | awk '{print $1}')\s" | sed 's/.*\t//' | xargs -r mpv
}

# handle urls
case $1 in

	# download as audio
	*youtube.com* | *youtu.be* | *soundcloud.com*)
		youtube-dl $ytdl_args $1
	;;

esac

if [ -z "$1" ]; then
	main
fi

# arguments
while getopts 'lsdvhf' flag; do
    case "${flag}" in
	l)
	    playlist
	    ;;
	s)
	    search
	    ;;
	h)
	    usage
	    ;;
	*)
	    usage
	    ;;
    esac
done
