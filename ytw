#!/usr/bin/env bash
#
# ytw - wrapper for youtube
# dependencies: mpv, rofi, youtube-dl, python, ttf-nerd-fonts-symbols, xclip, libnotify
# github.com/yrwq

YTW_PATH=$HOME/.local/share/ytw

# launch rofi with these arguments
rofi_args="-dmenu -i -matching fuzzy -p "

# which menu/launcher to use
# menu="dmenu -i -l 15"
menu="rofi $rofi_args"

# playlist file, used when -l argument passed
# in the file you should seperate the url with a tab
# example:
# title		url

vidlist="/home/$USER/.config/playlist"
# vidlist="$YTW_PATH/playlist"

# audio download args
ytdl_args="--add-metadata --embed-thumbnail \
	--extract-audio --audio-format mp3 --audio-quality 0 --prefer-ffmpeg \
	--ignore-errors --restrict-filenames --verbose"

# help message
usage(){
cat << EOF

Usage:
	ytw -l		pick from a playlist
	ytw -s		search on youtube
	ytw -d 		download audio
	ytw -v 		download video
	ytw <url>	download url as audio

EOF
}

# main menu
main(){
	choices=" Search\n Playlist\n陼 Edit\n Audio\n Video\n"
	choice=$(echo -ne ${choices} | $menu)
	fin=$(echo ${choice,,} | awk '{print $2}')
	case $fin in
		search)
			search
		;;
		playlist)
			playlist
		;;
		audio)
			ytw -d
		;;
		video)
			ytw -v
		;;
		edit)
			$TERMINAL -e $EDITOR $vidlist
		;;
	esac
}

search(){
	# search on youtube with rofi
	sh $YTW_PATH/utils -s

	# choose from results
	choice=$(sh $YTW_PATH/utils | $menu)

	title=$(echo ${choice} | awk '{$1=$2=""; print $0}')

	select="\n Watch\n陼 Add\n螺 Add-and-play\n Download-audio\n Download-video\n"
	selmen=$(echo -ne ${title} ${select} | $menu)
	fin=$(echo ${selmen,,} | awk '{print $2}')

	case $fin in
		watch)
			# search on youtube
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"

			# copy link to clipboard
			echo $link | xclip -sel clip
			notify-send " Now playing" "${title}"
			# play the final link in mpv
  			mpv "$link"
		;;
		*audio*)
			notify-send " Downloading" ${title}
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"
			youtube-dl $ytdl_args $link
		;;
		*video*)
			notify-send " Downloading" ${title}
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"
			youtube-dl $link -f best
		;;
		add)
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"

			echo -ne $title'	'$link'\n' >> $vidlist
			notify-send "陼Added" "${title}"
		;;
		add-and-play)
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"

			echo -ne $title'	'$link'\n' >> $vidlist
			notify-send "陼Added & loading" "${title}"
			echo $link | xclip -sel clip
			mpv $link
		;;
	esac
}

playlist(){
	if [ -z "$2" ]; then
		cat "$vidlist" | grep -P "^$(cat "$vidlist" | grep "https:" | sed 's/\t.*//g' | $menu | awk '{print $1}')\s" | sed 's/.*\t//' | xargs -r mpv
	fi

	if [ -n "$2" ]; then
		cat "$2" | grep -P "^$(cat "$2" | grep "https:" | sed 's/\t.*//g' | $menu | awk '{print $1}')\s" | sed 's/.*\t//' | xargs -r mpv
	fi
}

# download audio
# -d
if [ $dl = 'true' ]; then
	# generate the json file
	sh $YTW_PATH/generate

	# clean up json, only pipe actual titles to menu
	choice=$(sh $YTW_PATH/utils -c | $menu)

	# search on youtube
	yid=$(youtube-dl ytsearch:"$choice" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
	link=https://www.youtube.com/watch\?v\="$yid"

	if [ $audio = 'true' ]; then
		youtube-dl $ytdl_args $link
	elif [ $video = 'true' ]; then
		youtube-dl $link -f best
	fi
fi


# if argument is an url, download it as an audio
case $1 in

	*youtube.com* | *youtu.be* | *soundcloud.com*)
		youtube-dl $ytdl_args $1
	;;

esac

# if launched without arguments, show help message
[ -z "$1" ]; main

# arguments
while getopts 'lsdvh' flag; do
	case "${flag}" in
		l)
			playlist
			;;
		s)
			search
			;;
		d)
			list='false'
			search='false'
			dl='true'
			audio='true'
			video='false'
			;;
		v)
			list='false'
			search='false'
			dl='true'
			audio='false'
			video='true'
			;;
		h)
			usage
			;;
	esac
done
