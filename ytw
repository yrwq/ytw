#!/usr/bin/env bash
#
# ytw - wrapper for youtube
# dependencies: mpv, rofi, youtube-dl, python, ttf-nerd-fonts-symbols, xclip, libnotify
# github.com/yrwq

YTW_PATH=$HOME/.local/share/ytw

# path of the downloaded cover image
cover_path=$YTW_PATH/ytw_cover.jpg

# launch rofi with these arguments
rofi_args="-dmenu -i -matching fuzzy -p "

# which menu/launcher to use
# menu="dmenu -i -l 15"
menu="rofi $rofi_args"

# playlist file, used when -l argument passed
# in the file you should seperate the url with a tab
# example:
# title		url

vidlist="/home/$USER/.config/playlist"
# vidlist="$YTW_PATH/playlist"

# audio download args
ytdl_args="--add-metadata --embed-thumbnail \
	--extract-audio --audio-format mp3 --audio-quality 0 --prefer-ffmpeg \
	--ignore-errors --restrict-filenames --verbose"

# help message
usage(){
cat << EOF

Usage:
	ytw -l		pick from a playlist
	ytw -s		search on youtube
	ytw -d 		download audio
	ytw -v 		download video
	ytw <url>	download url as audio

EOF
}

# main menu
main(){
	choices=" Search\n Playlist\n陼 Edit\n Audio\n Video\n"
	choice=$(echo -ne ${choices} | $menu)
	fin=$(echo ${choice,,} | awk '{print $2}')
	case $fin in
		search)
			search
		;;
		playlist)
			playlist
		;;
		audio)
			download_audio
		;;
		video)
			download_video
		;;
		edit)
			$TERMINAL -e $EDITOR $vidlist
		;;
	esac
}

generate(){
	# search on youtube with rofi
	sh $YTW_PATH/utils -s

	# generate choices
	sh $YTW_PATH/utils -m

	# prompt the user to choose from choices
	choice=$(cat $YTW_PATH/choices | $menu)

	# exit if choice doesn't exist
	[[ -z "$choice" ]] && { exit 1; }

	# get information about video
	id=$(echo -e ${choice} | awk '{print $1}' )
	# title=$(echo -e ${choice} | awk '{$1=""; print $0}')

	infos=$(cat $YTW_PATH/values)

	thumbnail=$(echo $infos | jq .videos[$id].thumbnails | sed 's/[][]//g' | sed 's/"//g' )
	dur=$(echo $infos | jq .videos[$id].duration)
	channel=$(echo $infos | jq .videos[$id].channel)
	title=$(echo $infos | jq .videos[$id].title)
	views=$(echo $infos | jq .videos[$id].views)

	clear
	curl -Ss $thumbnail -o $YTW_PATH/ytw_cover.jpg
	echo $title
	echo $dur
	echo $channel
	echo $views

}

search(){
	generate

	select="\n Watch\n陼 Add\n螺 Add-and-play\n Download-audio\n Download-video\n"
	selmen=$(echo -ne "Title:${title} \nChannel:${channel}\nViews:${views}\nDuration:${dur}\n${select}" | $menu)
	fin=$(echo ${selmen,,} | awk '{print $2}')

	[[ -z "$select" ]] && { exit 1; }

	case $fin in
		watch)
			# search on youtube
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"

			# copy link to clipboard
			echo $link | xclip -sel clip
			notify-send -i $cover_path "  Now playing" "${title}"
			# play the final link in mpv
  			mpv "$link"
		;;
		*audio*)
			notify-send -i $cover_path " 	Downloading" ${title}
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"
			echo $link | xclip -sel clip
			youtube-dl $ytdl_args $link
		;;
		*video*)
			notify-send -i $cover_path " Downloading" ${title}
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"
			echo $link | xclip -sel clip
			youtube-dl $link -f best
		;;
		add)
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"

			echo -ne $title'	'$link'\n' >> $vidlist
			echo $link | xclip -sel clip
			notify-send -i $cover_path "陼Added" "${title}"
		;;
		add-and-play)
			yid=$(youtube-dl ytsearch:"$title" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
			link=https://www.youtube.com/watch\?v\="$yid"

			echo -ne $title'	'$link'\n' >> $vidlist
			notify-send -i $cover_path "陼Added & playing" "${title}"
			echo $link | xclip -sel clip
			mpv $link
		;;
	esac
}

playlist(){
	cat "$vidlist" | grep -P "^$(cat "$vidlist" | grep "https:" | sed 's/\t.*//g' | $menu | awk '{print $1}')\s" | sed 's/.*\t//' | xargs -r mpv
}

download_audio(){
	generate

	yid=$(youtube-dl ytsearch:"$choice" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
	link=https://www.youtube.com/watch\?v\="$yid"

	notify-send -i $cover_path " Downloading" "${title}"
	youtube-dl $ytdl_args $link
}

download_video(){
	generate

	yid=$(youtube-dl ytsearch:"$choice" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
	link=https://www.youtube.com/watch\?v\="$yid"

	notify-send -i $cover_path " Downloading" "${title}"

	youtube-dl $link -f best
}

# handle urls
case $1 in

	# download as audio
	*youtube.com* | *youtu.be* | *soundcloud.com*)
		youtube-dl $ytdl_args $1
	;;

esac

if [ -z "$1" ]; then
	main
fi

# arguments
while getopts 'lsdvhf' flag; do
	case "${flag}" in
		l)
			playlist
			;;
		s)
			search
			;;
		d)
			download_audio
			;;
		v)
			download_video
			;;
		f)
			generate
			;;
		h)
			usage
			;;
	esac
done
