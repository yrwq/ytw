#!/usr/bin/env bash
#
# ytw - wrapper for youtube
# dependencies: mpv, rofi, youtube-dl, python

# default settings, when you launch the script without arguments
list=false
search=false
dl=false
video=false
audio=false

rofi_args="-dmenu -p YouTubeî‚µ"

menu="rofi $rofi_args"

# playlist file, used when -l argument passed
# in the file you should seperate the url with a tab
# example:
# title		url

# vidlist="/home/$USER/.config/playlist"
vidlist="$PWD/playlist"

# help message
usage(){
cat << EOF

Usage:
	ytw -l		pick from a playlist
	ytw -s		search on youtube
	ytw -d 		download audio
	ytw -v 		download video
	ytw <url>	download url as audio

EOF
}

# arguments
while getopts 'lsdvh' flag; do
	case "${flag}" in
		l)
			list='true'
			search='false'
			dl='false'
			audio='false'
			video='false'
			;;
		s)
			list='false'
			search='true'
			dl='false'
			audio='false'
			video='false'
			;;
		d)
			list='false'
			search='false'
			dl='true'
			audio='true'
			video='false'
			;;
		v)
			list='false'
			search='false'
			dl='true'
			audio='false'
			video='true'
			;;
		h)
			usage
			;;
	esac
done

# search with rofi and play with mpv
if [ $search = 'true' ]; then
	./generate
	choice=$(./getlist | $menu)
	# choice=$(rofi -dmenu -p "search")
	yid=$(youtube-dl ytsearch:"$choice" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
	linktoplay=https://www.youtube.com/watch\?v\="$yid"
  	mpv "$linktoplay"
fi

if [ $list = 'true' ]; then
	cat "$vidlist" | grep -P "^$(cat "$vidlist" | grep "https:" | sed 's/\t.*//g' | rofi -dmenu -p 'search' | awk '{print $1}')\s" | sed 's/.*\t//' | xargs -r mpv
fi

if [ $dl = 'true' ]; then
	choice=$(rofi -dmenu -p "dl")
	yid=$(youtube-dl ytsearch:"$choice" -s | grep "\[youtube\]" | cut -d ']' -f 2 | awk -F ':' '{print $1}' | cut -c 2-)
	link=https://www.youtube.com/watch\?v\="$yid"
	if [ $audio = 'true' ]; then
  		youtube-dl --add-metadata --embed-thumbnail \
			--extract-audio --audio-format mp3 --audio-quality 0 --prefer-ffmpeg \
			--ignore-errors --restrict-filenames --verbose $link
	elif [ $video = 'true' ]; then
		youtube-dl $link -f best
	fi
fi

if [ -z "$1" ]; then
	usage
fi

case $1 in

	*youtube.com* | *youtu.be* | *soundcloud.com*)
		youtube-dl --add-metadata --embed-thumbnail \
			--extract-audio --audio-format mp3 --audio-quality 0 --prefer-ffmpeg \
			--ignore-errors --restrict-filenames --verbose $1
	;;

esac
